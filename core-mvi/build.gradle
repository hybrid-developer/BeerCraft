apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    defaultConfig {
        compileSdkVersion versions.compileSdkVersion
        buildToolsVersion versions.toolsVersion
        minSdkVersion versions.minSdkVersion
        targetSdkVersion versions.targetSdkVersion
        versionName = getVersionName()
        versionCode = getVersionCode()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "androidx.arch.core:core-runtime:${versions.archRuntime}"
    implementation "androidx.lifecycle:lifecycle-extensions:${versions.archLifecycleExtensions}"
    implementation "androidx.fragment:fragment:${versions.fragmentx}"

    /* rxjava2 */
    implementation "io.reactivex.rxjava2:rxjava:${versions.rxJava}"
    implementation "io.reactivex.rxjava2:rxandroid:${versions.rxAndroid}"
    implementation("com.jakewharton.rxbinding2:rxbinding:${versions.rxBinding}") {
        exclude group: 'io.reactivex.rxjava2', module: 'rxandroid'
    }

    /* dagger-hilt */
    implementation "com.google.dagger:hilt-android:${versions.dagger_hilt}"

    /* junit */
    testImplementation "junit:junit:${versions.junit}"
    testImplementation "org.junit.platform:junit-platform-runner:${versions.junitPlatformRunner}"

    /* assertj */
    testImplementation "org.assertj:assertj-core:${versions.assertj}"

    /* mockito */
    testImplementation "com.nhaarman:mockito-kotlin:${versions.mockitoKotlin}"
}